var geometry = /* color: #98ff00 */ee.Geometry.Polygon(
        [[[-68.24650314907142, -23.726759672464418],
          [-68.24427155117102, -23.727309702110166],
          [-68.24135330776282, -23.728724053399393],
          [-68.23860672573157, -23.729038351601808],
          [-68.23525932888099, -23.728016879673074],
          [-68.23268440822669, -23.72628821663517],
          [-68.2307961330802, -23.723852334355687],
          [-68.22779205898352, -23.723145134201424],
          [-68.22590378383704, -23.721809301221864],
          [-68.22573212246009, -23.72015913570523],
          [-68.22590378383704, -23.717801720170883],
          [-68.2264187679679, -23.71528709663027],
          [-68.22796372036048, -23.714108350156003],
          [-68.23319939235755, -23.71512993104917],
          [-68.23345688442298, -23.71371543229736],
          [-68.23603180507727, -23.712458087196115],
          [-68.23955086330481, -23.712300918206303],
          [-68.24195412258216, -23.712929593029347],
          [-68.24298409084388, -23.714108350156003],
          [-68.24341324428626, -23.71481559931887],
          [-68.24470070461341, -23.714972765278727],
          [-68.24641731838294, -23.71481559931887],
          [-68.2483914242179, -23.71536567934978],
          [-68.24967888454505, -23.716308668291045],
          [-68.25105217556067, -23.717251650414305],
          [-68.25148132900306, -23.718901852723587],
          [-68.25285462001868, -23.71953049572967],
          [-68.25431374172278, -23.720080555874013],
          [-68.25654533962317, -23.72165214350096],
          [-68.25628784755774, -23.72330229012276],
          [-68.25542954067298, -23.72471668489031],
          [-68.2538845882804, -23.72510956960256],
          [-68.25191048244544, -23.72503099275483],
          [-68.24976471523352, -23.72503099275483],
          [-68.2472756252677, -23.724323798994057],
          [-68.24650314907142, -23.724480953494627],
          [-68.24667481044837, -23.725423876519873]]]);
          
          
          
// Load region defined by polygon and add it to the map
var roi = geometry
Map.addLayer(roi, {}, 'ROI')
Map.centerObject(roi, 12)
          
//Load Sentinel-1 SAR collection and filter according to data collection type
var S1 = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(roi)
  .filterDate('2015-01-01','2021-12-31')
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.eq('resolution','H'))
  .filter(ee.Filter.eq('orbitProperties_pass','ASCENDING'))

//For stitching together
function makeMosaics(image) {
  var thisImage = ee.Image(image);
  var date = ee.Date(thisImage.get('system:time_start'));
  return ee.Image(S1.filterDate(date, date.advance(1,'day'))
                    .mosaic().copyProperties(image, ["system:time_start"]));
}

//Add first image to map to get an idea of what a SAR image looks like  
Map.addLayer(S1.first(),{bands: 'VV',min: -18, max: 0}, 'SAR image')
  
// Filter speckle noise
// I changes the filter from 100 to 10
var filterSpeckles = function(img) {
  var vv = img.select('VV') //select the VV polarization band
  var vv_smoothed = vv.focal_median(10,'circle','meters').rename('VV_Filtered') //Apply a focal median filter
  return img.addBands(vv_smoothed) // Add filtered VV band to original image
}

// Map speckle noise filter across collection. Result is same collection, with smoothed VV band added to each image
S1 = S1.map(filterSpeckles)

//Add speckle filtered image to map to sompare with raw SAR image
Map.addLayer(S1.first(),{bands: 'VV_Filtered',min: -18, max: 0}, 'Filtered SAR image')

//Classify water pixels using a set threshhold 
//Here we are using -16. This is only an approximation and will result in some errors. 
//I adjusted to -14 from -16
var classifyWater = function(img) {
  var vv = img.select('VV_Filtered')
  var water = vv.lt(-14).rename('Water')  //Identify all pixels below threshold and set them equal to 1. All other pixels set to 0
  water = water.updateMask(water) //Remove all pixels equal to 0
  return img.addBands(water)  //Return image with added classified water band
}

//Map classification across sentinel-1 collection and print to console to inspect
S1 = S1.map(classifyWater)
print(S1)

//Calculate area of water within the ROI
//Must use Image.pixelArea() as it creates a grid of projected pixels
//into a Lambert equal area projection
var areaFunction = function(image){
  var area_pxa = image.multiply(ee.Image.pixelArea()) 
                      .reduceRegion(ee.Reducer.sum(),roi,20,
                      null,null,false,1e13)
                      .get('Water')
      area_pxa = ee.Number(area_pxa).divide(1e6) 
    return image.addBands(area_pxa)
}

//Map classification across sentinel-1 collection and print to console to inspect
S1 = S1.map(areaFunction)
print(S1)

//Make time series of water pixels within region
//I changed the scale from 100 to 10
//Changed it back to 20 because it seems like EE was exceeded
var ClassChart = ui.Chart.image.series({
  imageCollection: S1.select('constant'),
  region: roi,
  //reducer: ee.Reducer.sum(),
  scale: 20,
})
  .setOptions({
      title: 'Time Series of Surface Water Area',
      hAxis: {'title': 'Date (Year)'},
      vAxis: {'title': 'Area (km^2)'},
      lineWidth: 2
    })

//Set the postion of the chart and add it to the map    
ClassChart.style().set({
    position: 'bottom-right',
    width: '500px',
    height: '300px'
  });
  
Map.add(ClassChart)

// Create a label on the map.
var label = ui.Label('Click a point on the chart to show the image for that date.');
Map.add(label);

//Create callback function that adds image to the map coresponding with clicked data point on chart
ClassChart.onClick(function(xValue, yValue, seriesName) {
    if (!xValue) return;  // Selection was cleared.
  
    // Show the image for the clicked date.
    var equalDate = ee.Filter.equals('system:time_start', xValue);
    //Find image coresponding with clicked data and clip water classification to roi 
    var classification = ee.Image(S1.filter(equalDate).first()).clip(roi).select('Water'); 
    var SARimage = ee.Image(S1.filter(equalDate).first());
    //Make map layer based on SAR image, reset the map layers, and add this new layer
    var S1Layer = ui.Map.Layer(SARimage, {
      bands: ['VV'],
      max: 0,
      min: -20
    });
    Map.layers().reset([S1Layer]);
    var visParams = {
      min: 0,
      max: 1,
      palette: ['#FFFFFF','#0000FF']
    }
    //Add water classification on top of SAR image
    Map.addLayer(classification,visParams,'Water')
    
    // Show a label with the date on the map.
    label.setValue((new Date(xValue)).toUTCString());
  });
